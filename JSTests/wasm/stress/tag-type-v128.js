//@ requireOptions("--useWasmSIMD=1")
//@ skip if !$isSIMDPlatform
import * as assert from "../assert.js";

/*
(module
  (type $0 (func (param i32 v128)))
  (type $1 (func))
  (import "imports" "import_0_v10" (tag $0 (type 0)))
  (export "w0" (func 0))
  (export "wex0" (tag 0))
  (func $0
    (type 1)
    (local i32 v128)
    (i32.const 1_073_741_824)
    (local.set 0)
    (v128.const i32x4 -201_178_342 -600_287_794 -1_636_370_190 1_743_164_903)
    (local.set 1)
    (local.get 0)
    (local.get 1)
    (throw 0)
  )
)
*/

let v10 = new WebAssembly.Tag({ parameters: ["i32", "v128"] });
const v19 = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x89, 0x80, 0x80, 0x80, 0x00, 0x02, 0x60, 0x02, 0x7f, 0x7b, 0x00, 0x60, 0x00, 0x00, 0x02, 0x99, 0x80, 0x80, 0x80, 0x00, 0x01, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x30, 0x5f, 0x76, 0x31, 0x30, 0x04, 0x00, 0x00, 0x03, 0x82, 0x80, 0x80, 0x80, 0x00, 0x01, 0x01, 0x07, 0x8d, 0x80, 0x80, 0x80, 0x00, 0x02, 0x02, 0x77, 0x30, 0x00, 0x00, 0x04, 0x77, 0x65, 0x78, 0x30, 0x04, 0x00, 0x0a, 0xae, 0x80, 0x80, 0x80, 0x00, 0x01, 0xa8, 0x80, 0x80, 0x80, 0x00, 0x02, 0x01, 0x7f, 0x01, 0x7b, 0x41, 0x80, 0x80, 0x80, 0x80, 0x04, 0x21, 0x00, 0xfd, 0x0c, 0x1a, 0x43, 0x02, 0xf4, 0xce, 0x55, 0x38, 0xdc, 0xf2, 0xf8, 0x76, 0x9e, 0xe7, 0x95, 0xe6, 0x67, 0x21, 0x01, 0x20, 0x00, 0x20, 0x01, 0x08, 0x00, 0x0b,
])),
    {
        imports: {
            import_0_v10: v10,
        }
    });
const v20 = v19.exports;

assert.throws(() => {
    try {
        v20.w0();
    } catch (e22) {
        e22.getArg(v10, 1);
    }
}, TypeError, "argument type cannot be a V128 or exnref");
