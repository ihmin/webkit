// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#pragma once

#include <array>
#include <wtf/HashFunctions.h>
#include <wtf/HashTraits.h>

namespace WebCore {

class Settings;

enum CSSPropertyID : uint16_t {
    CSSPropertyInvalid = 0,
    CSSPropertyCustom = 1,
    CSSPropertyTestTopPriority = 2,
    CSSPropertyTestHighPriority = 3,
    CSSPropertyFirstTestDescriptorForFirstDescriptor = 4,
    CSSPropertyFirstTestDescriptorForSecondDescriptor = 5,
    CSSPropertyTestAnimationWrapper = 6,
    CSSPropertyTestAnimationWrapperAccelerationAlways = 7,
    CSSPropertyTestAnimationWrapperAccelerationThreadedOnly = 8,
    CSSPropertyTestBoundedRepetitionWithCommas = 9,
    CSSPropertyTestBoundedRepetitionWithCommasFixed = 10,
    CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt = 11,
    CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt = 12,
    CSSPropertyTestBoundedRepetitionWithSpaces = 13,
    CSSPropertyTestBoundedRepetitionWithSpacesFixed = 14,
    CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt = 15,
    CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt = 16,
    CSSPropertyTestBoundedRepetitionWithSpacesWithType = 17,
    CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious = 18,
    CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo = 19,
    CSSPropertyTestColor = 20,
    CSSPropertyTestColorAllowsTypesAbsolute = 21,
    CSSPropertyTestColorAllowsTypesAbsolutePlusQuirkyColors = 22,
    CSSPropertyTestColorQuirkyColors = 23,
    CSSPropertyTestFunctionBoundedParameters = 24,
    CSSPropertyTestFunctionFixedParameters = 25,
    CSSPropertyTestFunctionNoParameters = 26,
    CSSPropertyTestFunctionParametersMatchAllAnyOrder = 27,
    CSSPropertyTestFunctionParametersMatchAllAnyOrderWithOptional = 28,
    CSSPropertyTestFunctionParametersMatchAllOrdered = 29,
    CSSPropertyTestFunctionParametersMatchAllOrderedWithOptional = 30,
    CSSPropertyTestFunctionParametersMatchOneOrMoreAnyOrder = 31,
    CSSPropertyTestFunctionSingleParameter = 32,
    CSSPropertyTestFunctionSingleParameterMatchOne = 33,
    CSSPropertyTestFunctionSingleParameterOptional = 34,
    CSSPropertyTestFunctionUnboundedParametersNoMin = 35,
    CSSPropertyTestFunctionUnboundedParametersWithMinimum = 36,
    CSSPropertyTestImage = 37,
    CSSPropertyTestImageNoImageSet = 38,
    CSSPropertyTestKeyword = 39,
    CSSPropertyTestKeywordWithAliasedTo = 40,
    CSSPropertyTestMatchAllAnyOrder = 41,
    CSSPropertyTestMatchAllAnyOrderWithOptional = 42,
    CSSPropertyTestMatchAllAnyOrderWithOptionalNoSingleItemOpt = 43,
    CSSPropertyTestMatchAllAnyOrderWithOptionalSingleItemOpt = 44,
    CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrder = 45,
    CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt = 46,
    CSSPropertyTestMatchAllAnyOrderWithPreserveOrder = 47,
    CSSPropertyTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt = 48,
    CSSPropertyTestMatchAllOrdered = 49,
    CSSPropertyTestMatchAllOrderedWithCustomType = 50,
    CSSPropertyTestMatchAllOrderedWithOptional = 51,
    CSSPropertyTestMatchAllOrderedWithOptionalAndCustomType = 52,
    CSSPropertyTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt = 53,
    CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequired = 54,
    CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType = 55,
    CSSPropertyTestMatchAllOrderedWithOptionalNoSingleItemOpt = 56,
    CSSPropertyTestMatchAllOrderedWithOptionalSingleItemOpt = 57,
    CSSPropertyTestMatchOne = 58,
    CSSPropertyTestMatchOneOrMoreAnyOrder = 59,
    CSSPropertyTestMatchOneOrMoreAnyOrderNoSingleItemOpt = 60,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrder = 61,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt = 62,
    CSSPropertyTestMatchOneWithGroupWithSettingsFlag = 63,
    CSSPropertyTestMatchOneWithKeywordWithSettingsFlag = 64,
    CSSPropertyTestMatchOneWithMultipleKeywords = 65,
    CSSPropertyTestMatchOneWithReferenceWithSettingsFlag = 66,
    CSSPropertyTestNumericValueRange = 67,
    CSSPropertyTestProperty = 68,
    CSSPropertyTestSettingsOne = 69,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMin = 70,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt = 71,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt = 72,
    CSSPropertyTestUnboundedRepetitionWithSpacesNoMin = 73,
    CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt = 74,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMin = 75,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt = 76,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt = 77,
    CSSPropertyTestUsingSharedRule = 78,
    CSSPropertyTestUsingSharedRuleExported = 79,
    CSSPropertyTestUsingSharedRuleWithOverrideFunction = 80,
    CSSPropertyTestSinkPriority = 81,
    CSSPropertyTestLogicalPropertyGroupLogicalBlock = 82,
    CSSPropertyTestLogicalPropertyGroupLogicalInline = 83,
    CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal = 84,
    CSSPropertyTestLogicalPropertyGroupPhysicalVertical = 85,
    CSSPropertyFont = 86,
    CSSPropertyTestShorthandOne = 87,
    CSSPropertyTestShorthandTwo = 88,
};

// Enum value of the first "real" CSS property, which excludes
// CSSPropertyInvalid and CSSPropertyCustom.
constexpr uint16_t firstCSSProperty = 2;
// Total number of enum values in the CSSPropertyID enum. If making an array
// that can be indexed into using the enum value, use this as the size.
constexpr uint16_t cssPropertyIDEnumValueCount = 89;
// Number of "real" CSS properties. This differs from cssPropertyIDEnumValueCount,
// as this doesn't consider CSSPropertyInvalid and CSSPropertyCustom.
constexpr uint16_t numCSSProperties = 87;
constexpr unsigned maxCSSPropertyNameLength = 77;
constexpr auto firstTopPriorityProperty = CSSPropertyID::CSSPropertyTestTopPriority;
constexpr auto lastTopPriorityProperty = CSSPropertyID::CSSPropertyTestTopPriority;
constexpr auto firstHighPriorityProperty = CSSPropertyID::CSSPropertyTestHighPriority;
constexpr auto lastHighPriorityProperty = CSSPropertyID::CSSPropertyTestHighPriority;
constexpr auto firstLowPriorityProperty = CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor;
constexpr auto lastLowPriorityProperty = CSSPropertyID::CSSPropertyTestSinkPriority;
constexpr auto firstLogicalGroupProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock;
constexpr auto lastLogicalGroupProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical;
constexpr auto firstShorthandProperty = CSSPropertyID::CSSPropertyFont;
constexpr auto lastShorthandProperty = CSSPropertyID::CSSPropertyTestShorthandTwo;
constexpr uint16_t numCSSPropertyLonghands = firstShorthandProperty - firstCSSProperty;
extern const std::array<CSSPropertyID, 82> computedPropertyIDs;

struct CSSPropertySettings {
    WTF_MAKE_STRUCT_FAST_ALLOCATED;

    bool cssDescriptorEnabled : 1 { false };
    bool cssSettingsOneEnabled : 1 { false };

    CSSPropertySettings() = default;
    explicit CSSPropertySettings(const Settings&);
};

bool operator==(const CSSPropertySettings&, const CSSPropertySettings&);
void add(Hasher&, const CSSPropertySettings&);

constexpr bool isLonghand(CSSPropertyID);
bool isInternal(CSSPropertyID);
bool isExposed(CSSPropertyID, const Settings*);
bool isExposed(CSSPropertyID, const Settings&);
bool isExposed(CSSPropertyID, const CSSPropertySettings*);
bool isExposed(CSSPropertyID, const CSSPropertySettings&);

CSSPropertyID findCSSProperty(const char* characters, unsigned length);
ASCIILiteral nameLiteral(CSSPropertyID);
const AtomString& nameString(CSSPropertyID);
String nameForIDL(CSSPropertyID);

CSSPropertyID cascadeAliasProperty(CSSPropertyID);

template<CSSPropertyID first, CSSPropertyID last> struct CSSPropertiesRange {
    struct Iterator {
        uint16_t index { static_cast<uint16_t>(first) };
        constexpr CSSPropertyID operator*() const { return static_cast<CSSPropertyID>(index); }
        constexpr Iterator& operator++() { ++index; return *this; }
        constexpr bool operator==(std::nullptr_t) const { return index > static_cast<uint16_t>(last); }
    };
    static constexpr Iterator begin() { return { }; }
    static constexpr std::nullptr_t end() { return nullptr; }
    static constexpr uint16_t size() { return last - first + 1; }
};
using AllCSSPropertiesRange = CSSPropertiesRange<static_cast<CSSPropertyID>(firstCSSProperty), lastShorthandProperty>;
using AllLonghandCSSPropertiesRange = CSSPropertiesRange<static_cast<CSSPropertyID>(firstCSSProperty), lastLogicalGroupProperty>;
constexpr AllCSSPropertiesRange allCSSProperties() { return { }; }
constexpr AllLonghandCSSPropertiesRange allLonghandCSSProperties() { return { }; }

constexpr bool isLonghand(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= firstCSSProperty && static_cast<uint16_t>(property) < static_cast<uint16_t>(firstShorthandProperty);
}
constexpr bool isShorthand(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= static_cast<uint16_t>(firstShorthandProperty) && static_cast<uint16_t>(property) <= static_cast<uint16_t>(lastShorthandProperty);
}

WTF::TextStream& operator<<(WTF::TextStream&, CSSPropertyID);

} // namespace WebCore

namespace WTF {

template<> struct DefaultHash<WebCore::CSSPropertyID> : IntHash<unsigned> { };

template<> struct HashTraits<WebCore::CSSPropertyID> : GenericHashTraits<WebCore::CSSPropertyID> {
    static const bool emptyValueIsZero = true;
    static void constructDeletedValue(WebCore::CSSPropertyID& slot) { slot = static_cast<WebCore::CSSPropertyID>(std::numeric_limits<uint16_t>::max()); }
    static bool isDeletedValue(WebCore::CSSPropertyID value) { return static_cast<uint16_t>(value) == std::numeric_limits<uint16_t>::max(); }
};

} // namespace WTF

namespace std {

template<> struct iterator_traits<WebCore::AllCSSPropertiesRange::Iterator> { using value_type = WebCore::CSSPropertyID; };
template<> struct iterator_traits<WebCore::AllLonghandCSSPropertiesRange::Iterator> { using value_type = WebCore::CSSPropertyID; };

} // namespace std

