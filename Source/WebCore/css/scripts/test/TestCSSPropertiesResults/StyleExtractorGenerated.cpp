// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#include "config.h"
#include "StyleExtractorGenerated.h"

#include "CSSPrimitiveValueMappings.h"
#include "CSSProperty.h"
#include "RenderStyle.h"
#include "StyleExtractorConverter.h"
#include "StyleExtractorCustom.h"
#include "StyleExtractorState.h"
#include "StylePropertyShorthand.h"

namespace WebCore {
namespace Style {

class ExtractorFunctions {
public:
    static RefPtr<CSSValue> extractValueTestTopPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testTopPriority());
    }
    static RefPtr<CSSValue> extractValueTestHighPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testHighPriority());
    }
    static RefPtr<CSSValue> extractValueTestAnimationWrapper(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapper());
    }
    static RefPtr<CSSValue> extractValueTestAnimationWrapperAccelerationAlways(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapperAccelerationAlways());
    }
    static RefPtr<CSSValue> extractValueTestAnimationWrapperAccelerationThreadedOnly(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapperAccelerationThreadedOnly());
    }
    static RefPtr<CSSValue> extractValueTestAutoFunctions(ExtractorState& extractorState)
    {
        if (extractorState.style.hasAutoTestAutoFunctions())
            return CSSPrimitiveValue::create(CSSValueAuto);
        return ExtractorConverter::convert(extractorState, extractorState.style.testAutoFunctions());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithCommas(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommas());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithCommasFixed(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasFixed());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithCommasNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithCommasSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpaces(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpaces());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesFixed(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesFixed());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesWithType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithType());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious());
    }
    static RefPtr<CSSValue> extractValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo());
    }
    static RefPtr<CSSValue> extractValueTestColor(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertColor(extractorState, extractorState.style.testColor());
    }
    static RefPtr<CSSValue> extractValueTestColorAllowsTypesAbsolute(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertColor(extractorState, extractorState.style.testColorAllowsTypesAbsolute());
    }
    static RefPtr<CSSValue> extractValueTestColorPropertyWithNoVisitedLinkSupport(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertColor(extractorState, extractorState.style.testColorPropertyWithNoVisitedLinkSupport());
    }
    static RefPtr<CSSValue> extractValueTestColorPropertyWithVisitedLinkSupport(ExtractorState& extractorState)
    {
        if (extractorState.allowVisitedStyle)
            return extractorState.pool.createColorValue(extractorState.style.visitedDependentColor(CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport));
        return ExtractorConverter::convertColor(extractorState, extractorState.style.testColorPropertyWithVisitedLinkSupport());
    }
    static RefPtr<CSSValue> extractValueTestExtractorConverter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertTestExtractorOnlyConversion(extractorState, extractorState.style.testExtractorConverter());
    }
    static RefPtr<CSSValue> extractValueTestFunctionBoundedParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionBoundedParameters());
    }
    static RefPtr<CSSValue> extractValueTestFunctionFixedParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionFixedParameters());
    }
    static RefPtr<CSSValue> extractValueTestFunctionNoParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionNoParameters());
    }
    static RefPtr<CSSValue> extractValueTestFunctionParametersMatchAllAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllAnyOrder());
    }
    static RefPtr<CSSValue> extractValueTestFunctionParametersMatchAllAnyOrderWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllAnyOrderWithOptional());
    }
    static RefPtr<CSSValue> extractValueTestFunctionParametersMatchAllOrdered(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllOrdered());
    }
    static RefPtr<CSSValue> extractValueTestFunctionParametersMatchAllOrderedWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllOrderedWithOptional());
    }
    static RefPtr<CSSValue> extractValueTestFunctionParametersMatchOneOrMoreAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchOneOrMoreAnyOrder());
    }
    static RefPtr<CSSValue> extractValueTestFunctionSingleParameter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameter());
    }
    static RefPtr<CSSValue> extractValueTestFunctionSingleParameterMatchOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameterMatchOne());
    }
    static RefPtr<CSSValue> extractValueTestFunctionSingleParameterOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameterOptional());
    }
    static RefPtr<CSSValue> extractValueTestFunctionUnboundedParametersNoMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionUnboundedParametersNoMin());
    }
    static RefPtr<CSSValue> extractValueTestFunctionUnboundedParametersWithMinimum(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionUnboundedParametersWithMinimum());
    }
    static RefPtr<CSSValue> extractValueTestImage(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testImage());
    }
    static RefPtr<CSSValue> extractValueTestImageNoImageSet(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testImageNoImageSet());
    }
    static RefPtr<CSSValue> extractValueTestKeyword(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testKeyword());
    }
    static RefPtr<CSSValue> extractValueTestKeywordWithAliasedTo(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testKeywordWithAliasedTo());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrder());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptional());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrdered(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrdered());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptional());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalAndMultipleRequired(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequired());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchAllOrderedWithOptionalSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOne());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrder());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneWithGroupWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithGroupWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneWithKeywordWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithKeywordWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneWithMultipleKeywords(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithMultipleKeywords());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneWithReferenceWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithReferenceWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractValueTestMatchOneWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractValueTestNumericValueRange(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testNumericValueRange());
    }
    static RefPtr<CSSValue> extractValueTestProperty(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testProperty());
    }
    static RefPtr<CSSValue> extractValueTestSettingsOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testSettingsOne());
    }
    static RefPtr<CSSValue> extractValueTestSharedBuilderExtractorConverter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertTestSharedBuilderExtractorConversion(extractorState, extractorState.style.testSharedBuilderExtractorConverter());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithCommasWithMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMin());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMinSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithSpacesNoMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesNoMin());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithSpacesWithMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMin());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMinSingleItemOpt());
    }
    static RefPtr<CSSValue> extractValueTestUrlWithModifiers(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUrlWithModifiers());
    }
    static RefPtr<CSSValue> extractValueTestUrlWithNoModifiers(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUrlWithNoModifiers());
    }
    static RefPtr<CSSValue> extractValueTestUsingSharedRule(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRule());
    }
    static RefPtr<CSSValue> extractValueTestUsingSharedRuleExported(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRuleExported());
    }
    static RefPtr<CSSValue> extractValueTestUsingSharedRuleWithOverrideFunction(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRuleWithOverrideFunction());
    }
    static RefPtr<CSSValue> extractValueTestSinkPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testSinkPriority());
    }
    static RefPtr<CSSValue> extractValueTestLogicalPropertyGroupPhysicalHorizontal(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testLogicalPropertyGroupPhysicalHorizontal());
    }
    static RefPtr<CSSValue> extractValueTestLogicalPropertyGroupPhysicalVertical(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testLogicalPropertyGroupPhysicalVertical());
    }
    static RefPtr<CSSValue> extractValueTestShorthandTwoShorthand(ExtractorState& extractorState)
    {
        return extractValues2Shorthand(extractorState, testShorthandTwoShorthand());
    }
};

RefPtr<CSSValue> ExtractorGenerated::extractValue(ExtractorState& extractorState, CSSPropertyID id)
{
    switch (id) {
    case CSSPropertyID::CSSPropertyInvalid:
        break;
    case CSSPropertyID::CSSPropertyCustom:
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestTopPriority:
        return ExtractorFunctions::extractValueTestTopPriority(extractorState);
    case CSSPropertyID::CSSPropertyTestHighPriority:
        return ExtractorFunctions::extractValueTestHighPriority(extractorState);
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor:
        // Skipped - Descriptor-only property
        return nullptr;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForSecondDescriptor:
        // Skipped - Descriptor-only property
        return nullptr;
    case CSSPropertyID::CSSPropertyTestAnimationWrapper:
        return ExtractorFunctions::extractValueTestAnimationWrapper(extractorState);
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationAlways:
        return ExtractorFunctions::extractValueTestAnimationWrapperAccelerationAlways(extractorState);
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationThreadedOnly:
        return ExtractorFunctions::extractValueTestAnimationWrapperAccelerationThreadedOnly(extractorState);
    case CSSPropertyID::CSSPropertyTestAutoFunctions:
        return ExtractorFunctions::extractValueTestAutoFunctions(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommas:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithCommas(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasFixed:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithCommasFixed(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithCommasNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithCommasSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpaces:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpaces(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesFixed:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesFixed(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithType:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesWithType(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo:
        return ExtractorFunctions::extractValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(extractorState);
    case CSSPropertyID::CSSPropertyTestColor:
        return ExtractorFunctions::extractValueTestColor(extractorState);
    case CSSPropertyID::CSSPropertyTestColorAllowsTypesAbsolute:
        return ExtractorFunctions::extractValueTestColorAllowsTypesAbsolute(extractorState);
    case CSSPropertyID::CSSPropertyTestColorPropertyWithNoVisitedLinkSupport:
        return ExtractorFunctions::extractValueTestColorPropertyWithNoVisitedLinkSupport(extractorState);
    case CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport:
        return ExtractorFunctions::extractValueTestColorPropertyWithVisitedLinkSupport(extractorState);
    case CSSPropertyID::CSSPropertyTestCustonmExtractor:
        return ExtractorCustom::extractValueTestCustonmExtractor(extractorState);
    case CSSPropertyID::CSSPropertyTestExtractorConverter:
        return ExtractorFunctions::extractValueTestExtractorConverter(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionBoundedParameters:
        return ExtractorFunctions::extractValueTestFunctionBoundedParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionFixedParameters:
        return ExtractorFunctions::extractValueTestFunctionFixedParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionNoParameters:
        return ExtractorFunctions::extractValueTestFunctionNoParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrder:
        return ExtractorFunctions::extractValueTestFunctionParametersMatchAllAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrderWithOptional:
        return ExtractorFunctions::extractValueTestFunctionParametersMatchAllAnyOrderWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrdered:
        return ExtractorFunctions::extractValueTestFunctionParametersMatchAllOrdered(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrderedWithOptional:
        return ExtractorFunctions::extractValueTestFunctionParametersMatchAllOrderedWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchOneOrMoreAnyOrder:
        return ExtractorFunctions::extractValueTestFunctionParametersMatchOneOrMoreAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameter:
        return ExtractorFunctions::extractValueTestFunctionSingleParameter(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterMatchOne:
        return ExtractorFunctions::extractValueTestFunctionSingleParameterMatchOne(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterOptional:
        return ExtractorFunctions::extractValueTestFunctionSingleParameterOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersNoMin:
        return ExtractorFunctions::extractValueTestFunctionUnboundedParametersNoMin(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersWithMinimum:
        return ExtractorFunctions::extractValueTestFunctionUnboundedParametersWithMinimum(extractorState);
    case CSSPropertyID::CSSPropertyTestImage:
        return ExtractorFunctions::extractValueTestImage(extractorState);
    case CSSPropertyID::CSSPropertyTestImageNoImageSet:
        return ExtractorFunctions::extractValueTestImageNoImageSet(extractorState);
    case CSSPropertyID::CSSPropertyTestKeyword:
        return ExtractorFunctions::extractValueTestKeyword(extractorState);
    case CSSPropertyID::CSSPropertyTestKeywordWithAliasedTo:
        return ExtractorFunctions::extractValueTestKeywordWithAliasedTo(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrder:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptional:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrder:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrder:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrdered:
        return ExtractorFunctions::extractValueTestMatchAllOrdered(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithCustomType:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptional:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequired:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalAndMultipleRequired(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchAllOrderedWithOptionalSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOne:
        return ExtractorFunctions::extractValueTestMatchOne(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrder:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomType:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrder:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithGroupWithSettingsFlag:
        return ExtractorFunctions::extractValueTestMatchOneWithGroupWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithKeywordWithSettingsFlag:
        return ExtractorFunctions::extractValueTestMatchOneWithKeywordWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithMultipleKeywords:
        return ExtractorFunctions::extractValueTestMatchOneWithMultipleKeywords(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithReferenceWithSettingsFlag:
        return ExtractorFunctions::extractValueTestMatchOneWithReferenceWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithSettingsFlag:
        return ExtractorFunctions::extractValueTestMatchOneWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestNumericValueRange:
        return ExtractorFunctions::extractValueTestNumericValueRange(extractorState);
    case CSSPropertyID::CSSPropertyTestProperty:
        return ExtractorFunctions::extractValueTestProperty(extractorState);
    case CSSPropertyID::CSSPropertyTestSettingsOne:
        return ExtractorFunctions::extractValueTestSettingsOne(extractorState);
    case CSSPropertyID::CSSPropertyTestSharedBuilderExtractorConverter:
        return ExtractorFunctions::extractValueTestSharedBuilderExtractorConverter(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMin:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithCommasWithMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMin:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithSpacesNoMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMin:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithSpacesWithMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt:
        return ExtractorFunctions::extractValueTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUrlWithModifiers:
        return ExtractorFunctions::extractValueTestUrlWithModifiers(extractorState);
    case CSSPropertyID::CSSPropertyTestUrlWithNoModifiers:
        return ExtractorFunctions::extractValueTestUrlWithNoModifiers(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRule:
        return ExtractorFunctions::extractValueTestUsingSharedRule(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleExported:
        return ExtractorFunctions::extractValueTestUsingSharedRuleExported(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleWithOverrideFunction:
        return ExtractorFunctions::extractValueTestUsingSharedRuleWithOverrideFunction(extractorState);
    case CSSPropertyID::CSSPropertyTestSinkPriority:
        return ExtractorFunctions::extractValueTestSinkPriority(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal:
        return ExtractorFunctions::extractValueTestLogicalPropertyGroupPhysicalHorizontal(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical:
        return ExtractorFunctions::extractValueTestLogicalPropertyGroupPhysicalVertical(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock:
        // Logical properties are handled by recursing using the direction resolved property.
        return extractValue(extractorState, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline:
        // Logical properties are handled by recursing using the direction resolved property.
        return extractValue(extractorState, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
    case CSSPropertyID::CSSPropertyAll:
        // Skipped - Not computable
        return nullptr;
    case CSSPropertyID::CSSPropertyFont:
        ASSERT(isShorthand(id));
        return ExtractorCustom::extractValueFontShorthand(extractorState);
    case CSSPropertyID::CSSPropertyTestShorthandOne:
        ASSERT(isShorthand(id));
        return ExtractorCustom::extractValueTestShorthandOneShorthand(extractorState);
    case CSSPropertyID::CSSPropertyTestShorthandTwo:
        ASSERT(isShorthand(id));
        return ExtractorFunctions::extractValueTestShorthandTwoShorthand(extractorState);
    }
    ASSERT_NOT_REACHED();
    return nullptr;
}

} // namespace WebCore
} // namespace Style

