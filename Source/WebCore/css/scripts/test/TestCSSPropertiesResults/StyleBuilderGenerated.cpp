// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#include "config.h"
#include "StyleBuilderGenerated.h"

#include "CSSPrimitiveValueMappings.h"
#include "CSSProperty.h"
#include "RenderStyleSetters.h"
#include "StyleBuilderConverter.h"
#include "StyleBuilderCustom.h"
#include "StyleBuilderState.h"
#include "StylePropertyShorthand.h"

namespace WebCore {
namespace Style {

class BuilderFunctions {
public:
    static void applyInitialTestTopPriority(BuilderState& builderState)
    {
        builderState.style().setTestTopPriority(RenderStyle::initialTestTopPriority());
    }
    static void applyInheritTestTopPriority(BuilderState& builderState)
    {
        builderState.style().setTestTopPriority(forwardInheritedValue(builderState.parentStyle().testTopPriority()));
    }
    static void applyValueTestTopPriority(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestTopPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestHighPriority(BuilderState& builderState)
    {
        builderState.style().setTestHighPriority(RenderStyle::initialTestHighPriority());
    }
    static void applyInheritTestHighPriority(BuilderState& builderState)
    {
        builderState.style().setTestHighPriority(forwardInheritedValue(builderState.parentStyle().testHighPriority()));
    }
    static void applyValueTestHighPriority(BuilderState& builderState, CSSValue& value)
    {
        if (CSSPropertyParserHelpers::isSystemFontShorthand(value.valueID())) {
            applyInitialTestHighPriority(builderState);
            return;
        }
        builderState.style().setTestHighPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapper(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapper(RenderStyle::initialTestAnimationWrapper());
    }
    static void applyInheritTestAnimationWrapper(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapper(forwardInheritedValue(builderState.parentStyle().testAnimationWrapper()));
    }
    static void applyValueTestAnimationWrapper(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapper(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapperAccelerationAlways(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(RenderStyle::initialTestAnimationWrapperAccelerationAlways());
    }
    static void applyInheritTestAnimationWrapperAccelerationAlways(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(forwardInheritedValue(builderState.parentStyle().testAnimationWrapperAccelerationAlways()));
    }
    static void applyValueTestAnimationWrapperAccelerationAlways(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(RenderStyle::initialTestAnimationWrapperAccelerationThreadedOnly());
    }
    static void applyInheritTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(forwardInheritedValue(builderState.parentStyle().testAnimationWrapperAccelerationThreadedOnly()));
    }
    static void applyValueTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithCommas(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommas(RenderStyle::initialTestBoundedRepetitionWithCommas());
    }
    static void applyInheritTestBoundedRepetitionWithCommas(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommas(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithCommas()));
    }
    static void applyValueTestBoundedRepetitionWithCommas(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithCommas(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithCommasFixed(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasFixed(RenderStyle::initialTestBoundedRepetitionWithCommasFixed());
    }
    static void applyInheritTestBoundedRepetitionWithCommasFixed(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasFixed(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithCommasFixed()));
    }
    static void applyValueTestBoundedRepetitionWithCommasFixed(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithCommasFixed(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithCommasNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasNoSingleItemOpt(RenderStyle::initialTestBoundedRepetitionWithCommasNoSingleItemOpt());
    }
    static void applyInheritTestBoundedRepetitionWithCommasNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasNoSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithCommasNoSingleItemOpt()));
    }
    static void applyValueTestBoundedRepetitionWithCommasNoSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithCommasNoSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithCommasSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasSingleItemOpt(RenderStyle::initialTestBoundedRepetitionWithCommasSingleItemOpt());
    }
    static void applyInheritTestBoundedRepetitionWithCommasSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithCommasSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithCommasSingleItemOpt()));
    }
    static void applyValueTestBoundedRepetitionWithCommasSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithCommasSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpaces(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpaces(RenderStyle::initialTestBoundedRepetitionWithSpaces());
    }
    static void applyInheritTestBoundedRepetitionWithSpaces(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpaces(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpaces()));
    }
    static void applyValueTestBoundedRepetitionWithSpaces(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpaces(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesFixed(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesFixed(RenderStyle::initialTestBoundedRepetitionWithSpacesFixed());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesFixed(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesFixed(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesFixed()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesFixed(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesFixed(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesNoSingleItemOpt(RenderStyle::initialTestBoundedRepetitionWithSpacesNoSingleItemOpt());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesNoSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesNoSingleItemOpt()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesNoSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesNoSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesSingleItemOpt(RenderStyle::initialTestBoundedRepetitionWithSpacesSingleItemOpt());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesSingleItemOpt()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesWithType(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithType(RenderStyle::initialTestBoundedRepetitionWithSpacesWithType());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesWithType(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithType(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesWithType()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesWithType(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithType(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(RenderStyle::initialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(RenderStyle::initialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo());
    }
    static void applyInheritTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(BuilderState& builderState)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(forwardInheritedValue(builderState.parentStyle().testBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo()));
    }
    static void applyValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestNumericValueRange(BuilderState& builderState)
    {
        builderState.style().setTestNumericValueRange(RenderStyle::initialTestNumericValueRange());
    }
    static void applyInheritTestNumericValueRange(BuilderState& builderState)
    {
        builderState.style().setTestNumericValueRange(forwardInheritedValue(builderState.parentStyle().testNumericValueRange()));
    }
    static void applyValueTestNumericValueRange(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestNumericValueRange(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestProperty(BuilderState& builderState)
    {
        builderState.style().setTestProperty(RenderStyle::initialTestProperty());
    }
    static void applyInheritTestProperty(BuilderState& builderState)
    {
        builderState.style().setTestProperty(forwardInheritedValue(builderState.parentStyle().testProperty()));
    }
    static void applyValueTestProperty(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestProperty(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestSettingsOne(BuilderState& builderState)
    {
        builderState.style().setTestSettingsOne(RenderStyle::initialTestSettingsOne());
    }
    static void applyInheritTestSettingsOne(BuilderState& builderState)
    {
        builderState.style().setTestSettingsOne(forwardInheritedValue(builderState.parentStyle().testSettingsOne()));
    }
    static void applyValueTestSettingsOne(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestSettingsOne(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithCommasWithMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMin(RenderStyle::initialTestUnboundedRepetitionWithCommasWithMin());
    }
    static void applyInheritTestUnboundedRepetitionWithCommasWithMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMin(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithCommasWithMin()));
    }
    static void applyValueTestUnboundedRepetitionWithCommasWithMin(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMin(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(RenderStyle::initialTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt());
    }
    static void applyInheritTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithCommasWithMinNoSingleItemOpt()));
    }
    static void applyValueTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(RenderStyle::initialTestUnboundedRepetitionWithCommasWithMinSingleItemOpt());
    }
    static void applyInheritTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithCommasWithMinSingleItemOpt()));
    }
    static void applyValueTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithSpacesNoMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMin(RenderStyle::initialTestUnboundedRepetitionWithSpacesNoMin());
    }
    static void applyInheritTestUnboundedRepetitionWithSpacesNoMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMin(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithSpacesNoMin()));
    }
    static void applyValueTestUnboundedRepetitionWithSpacesNoMin(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMin(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(RenderStyle::initialTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt());
    }
    static void applyInheritTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt()));
    }
    static void applyValueTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithSpacesWithMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMin(RenderStyle::initialTestUnboundedRepetitionWithSpacesWithMin());
    }
    static void applyInheritTestUnboundedRepetitionWithSpacesWithMin(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMin(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithSpacesWithMin()));
    }
    static void applyValueTestUnboundedRepetitionWithSpacesWithMin(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMin(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(RenderStyle::initialTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt());
    }
    static void applyInheritTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt()));
    }
    static void applyValueTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(RenderStyle::initialTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt());
    }
    static void applyInheritTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(BuilderState& builderState)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(forwardInheritedValue(builderState.parentStyle().testUnboundedRepetitionWithSpacesWithMinSingleItemOpt()));
    }
    static void applyValueTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUsingSharedRule(BuilderState& builderState)
    {
        builderState.style().setTestUsingSharedRule(RenderStyle::initialTestUsingSharedRule());
    }
    static void applyInheritTestUsingSharedRule(BuilderState& builderState)
    {
        builderState.style().setTestUsingSharedRule(forwardInheritedValue(builderState.parentStyle().testUsingSharedRule()));
    }
    static void applyValueTestUsingSharedRule(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUsingSharedRule(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestSinkPriority(BuilderState& builderState)
    {
        builderState.style().setTestSinkPriority(RenderStyle::initialTestSinkPriority());
    }
    static void applyInheritTestSinkPriority(BuilderState& builderState)
    {
        builderState.style().setTestSinkPriority(forwardInheritedValue(builderState.parentStyle().testSinkPriority()));
    }
    static void applyValueTestSinkPriority(BuilderState& builderState, CSSValue& value)
    {
        if (CSSPropertyParserHelpers::isSystemFontShorthand(value.valueID())) {
            applyInitialTestSinkPriority(builderState);
            return;
        }
        builderState.style().setTestSinkPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(RenderStyle::initialTestLogicalPropertyGroupPhysicalHorizontal());
    }
    static void applyInheritTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(forwardInheritedValue(builderState.parentStyle().testLogicalPropertyGroupPhysicalHorizontal()));
    }
    static void applyValueTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(RenderStyle::initialTestLogicalPropertyGroupPhysicalVertical());
    }
    static void applyInheritTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(forwardInheritedValue(builderState.parentStyle().testLogicalPropertyGroupPhysicalVertical()));
    }
    static void applyValueTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(fromCSSValueDeducingType(builderState, value));
    }
};

void BuilderGenerated::applyProperty(CSSPropertyID id, BuilderState& builderState, CSSValue& value, ApplyValueType valueType)
{
    switch (id) {
    case CSSPropertyID::CSSPropertyInvalid:
        break;
    case CSSPropertyID::CSSPropertyCustom:
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestTopPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestTopPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestTopPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestTopPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestHighPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestHighPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestHighPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestHighPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor:
        break;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForSecondDescriptor:
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapper:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapper(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapper(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapper(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationAlways:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapperAccelerationAlways(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapperAccelerationAlways(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapperAccelerationAlways(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationThreadedOnly:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapperAccelerationThreadedOnly(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapperAccelerationThreadedOnly(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapperAccelerationThreadedOnly(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommas:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithCommas(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithCommas(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithCommas(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasFixed:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithCommasFixed(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithCommasFixed(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithCommasFixed(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithCommasNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithCommasNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithCommasNoSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithCommasSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithCommasSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithCommasSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpaces:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpaces(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpaces(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpaces(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesFixed:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesFixed(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesFixed(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesFixed(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesNoSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithType:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesWithType(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesWithType(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesWithType(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestNumericValueRange:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestNumericValueRange(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestNumericValueRange(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestNumericValueRange(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestProperty:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestProperty(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestProperty(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestProperty(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestSettingsOne:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestSettingsOne(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestSettingsOne(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestSettingsOne(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMin:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithCommasWithMin(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithCommasWithMin(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithCommasWithMin(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMin:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithSpacesNoMin(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithSpacesNoMin(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithSpacesNoMin(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMin:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithSpacesWithMin(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithSpacesWithMin(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithSpacesWithMin(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUsingSharedRule:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUsingSharedRule(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUsingSharedRule(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUsingSharedRule(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestSinkPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestSinkPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestSinkPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestSinkPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock:
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline:
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestLogicalPropertyGroupPhysicalHorizontal(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestLogicalPropertyGroupPhysicalHorizontal(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestLogicalPropertyGroupPhysicalHorizontal(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestLogicalPropertyGroupPhysicalVertical(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestLogicalPropertyGroupPhysicalVertical(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestLogicalPropertyGroupPhysicalVertical(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyFont:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestShorthandOne:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestShorthandTwo:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    }
}

} // namespace WebCore
} // namespace Style

